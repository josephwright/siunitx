%%
%% This is file `siunitx-version-1.cfg',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% siunitx-v2.dtx  (with options: `config,version-1')
%% ---------------------------------------------------------------
%% The siunitx package --- A comprehensive (SI) units package
%% Maintained by Joseph Wright
%% E-mail: joseph.wright@morningstar2.co.uk
%% Released under the LaTeX Project Public License v1.3c or later
%% See http://www.latex-project.org/lppl.txt
%% ---------------------------------------------------------------
%% 
\ProvidesExplFile {siunitx-version-1.cfg} {2021-04-17} {2.8e}
  {siunitx: Version 1 settings}
\keys_define:nn { siunitx } {
  addsign        .choice: ,
  addsign /
    all          .meta:n    = { explicit-sign           = +           },
  addsign /
    exp          .meta:n    = { explicit-sign           = +           },
  addsign /
    false        .meta:n    = { explicit-sign           =             },
  addsign /
    mant         .meta:n    = { explicit-sign           = +           },
  addsign /
    none         .meta:n    = { explicit-sign           =             },
  addsign /
    true         .meta:n    = { explicit-sign           = +           },
  addsign        .default:n = { true                                  },
  allowlitunits  .meta:n    = { free-standing-units     = #1          },
  allowlitunits  .default:n = { true                                  },
  allowoptarg    .meta:n    = { unit-optional-argument  = #1          },
  allowoptargs   .default:n = { true                                  },
  allowzeroexp   .meta:n    = { retain-zero-exponent    = #1          },
  allowzeroexp   .default:n = { true                                  },
  alsoload       .code:n    = ,
  angformat      .code:n    = ,
  anglesep       .choice: ,
  anglesep /
    cdot         .meta:n    =
      { arc-separator         = \ensuremath { { } \cdot { } } },
  anglesep /
    comma        .meta:n    = { arc-separator           = \ensuremath { { {,} } } },
  anglesep /
    fullstop     .meta:n    = { arc-separator           = \ensuremath { { { . } } } },
  anglesep /
    med          .meta:n    = { arc-separator           = \ensuremath { \: } },
  anglesep /
    medium       .meta:n    = { arc-separator           = \ensuremath { \: } },
  anglesep /
    none         .meta:n    = { arc-separator           =             },
  anglesep /
    period       .meta:n    = { arc-separator           = \ensuremath { { { . } } } },
  anglesep /
    space        .meta:n    = { arc-separator           = \text { ~ } },
  anglesep /
    stop         .meta:n    = { arc-separator           = \ensuremath { { { . } } } },
  anglesep /
    thick        .meta:n    = { arc-separator           = \ensuremath { \; } },
  anglesep /
    thin         .meta:n    = { arc-separator           = \ensuremath { \, }  },
  anglesep /
    tightcdot    .meta:n    =
      { arc-separator           = \ensuremath { \bgroup \cdot \egroup } },
  anglesep /
    tighttimes   .meta:n    =
      { arc-separator           = \ensuremath { \bgroup \times \egroup } },
  anglesep /
    times        .meta:n    = { arc-separator           = \ensuremath { \times } },
  anglesep /
    unknown      .meta:n    = { arc-separator           = \ensuremath {#1} },
  astroang       .meta:n    =
    { angle-symbol-over-decimal = #1                                  },
  astroang       .default:n = { true                                  },
  closeerr       .meta:n    = { close-bracket           = \ensuremath {#1} },
  closefrac      .meta:n    = { close-bracket           = \ensuremath {#1} },
  closerange     .meta:n    = { close-bracket           = \ensuremath {#1} },
  colour         .code:n    = { color                   = #1          },
  colorall       .code:n    = ,
  colourall      .code:n    = ,
  colorneg       .code:n    = ,
  colourneg      .code:n    = ,
  colorunits     .meta:n    = ,
  colourunits    .meta:n    = ,
  colorvalues    .meta:n    = ,
  colourvalues   .meta:n    = ,
  decimalsymbol  .choice: ,
  decimalsymbol /
    cdot         .meta:n    =
      { output-decimal-marker   = \ensuremath { { } \cdot { } } },
  decimalsymbol /
    comma        .meta:n    = { output-decimal-marker   = { \ensuremath { { , } } } },
  decimalsymbol /
    fullstop     .meta:n    = { output-decimal-marker   = { \ensuremath { { . } } } },
  decimalsymbol /
    period       .meta:n    = { output-decimal-marker   = { \ensuremath { { . } } } },
  decimalsymbol /
    stop         .meta:n    = { output-decimal-marker   = { \ensuremath { { . } } } },
  decimalsymbol /
    tightcdot    .code:n    =
      { output-decimal-marker   = \ensuremath { \bgroup \cdot \egroup } },
  decimalsymbol /
    unknown      .meta:n    = { output-decimal-marker   = \ensuremath {#1} },
  debug          .code:n    = ,
  detectdisplay  .meta:n    = { detect-display-math     = #1          },
  detectdisplay  .default:n = { true                                  },
  digitsep       .choice: ,
  digitsep /
    cdot         .meta:n    =
      { group-separator       = \ensuremath { { } \cdot { } }         },
  digitsep /
    comma        .meta:n    = { group-separator         = \ensuremath { { , } } },
  digitsep /
    fullstop     .meta:n    = { group-separator         = \ensuremath { . } },
  digitsep /
    med          .meta:n    = { group-separator         = \ensuremath { \: } },
  digitsep /
    medium       .meta:n    = { group-separator         = \ensuremath { \: } },
  digitsep /
    none         .meta:n    = { group-separator         =             },
  digitsep /
    period       .meta:n    = { group-separator         = \ensuremath { . } },
  digitsep /
    space        .meta:n    = { group-separator         = \text { ~ } },
  digitsep /
    stop         .meta:n    = { group-separator         = \ensuremath { . } },
  digitsep /
    thick        .meta:n    = { group-separator         = \ensuremath { \; } },
  digitsep /
    thin         .meta:n    = { group-separator         = \ensuremath { \, }  },
  digitsep /
    tightcdot    .meta:n    =
      { group-separator         = \ensuremath { \bgroup \cdot \egroup } },
  digitsep /
    tighttimes  .meta:n     =
      { group-separator         = \ensuremath { \bgroup \times \egroup } },
  digitsep /
    times        .meta:n    = { group-separator         = \ensuremath { \times } },
  digitsep /
    unknown      .meta:n    = { group-separator         = \ensuremath {#1} },
  dp             .meta:n    =
    {
      round-mode      = places,
      round-precision = #1,
    },
  emulate        .code:n    = ,
  errspace       .choice: ,
  errspace /
    med          .meta:n    = { uncertainty-separator   = \ensuremath { \: } },
  errspace /
    medium       .meta:n    = { uncertainty-separator   = \ensuremath { \: } },
  errspace /
    none         .meta:n    = { uncertainty-separator   =             },
  errspace /
    space        .meta:n    = { uncertainty-separator   = \text { ~ } },
  errspace /
    thick        .meta:n    = { uncertainty-separator   = \ensuremath { \; } },
  errspace /
    thin         .meta:n    = { uncertainty-separator   = \ensuremath { \, } },
  errspace /
    unknown      .meta:n    = { uncertainty-separator   = \ensuremath {#1} },
  eVcorra        .code:n    = ,
  eVcorrb        .code:n    = ,
  expbase        .choice: ,
  expbase /
    ten          .meta:n    = { exponent-base           = 10          },
  expbase /
    two          .meta:n    = { exponent-base           = 2           },
  expbase /
    unknown      .meta:n    = { exponent-base           = #1          },
  expproduct     .choice: ,
  expproduct /
    cdot         .meta:n    =
      { exponent-product        = \ensuremath { { } \cdot { } }        },
  expproduct /
    tightcdot    .meta:n    =
      { exponent-product        = \ensuremath { \bgroup \cdot \egroup } },
  expproduct /
    tighttimes   .meta:n    =
      { exponent-product        = \ensuremath { \bgroup \times \egroup } },
  expproduct /
    times        .meta:n    = { exponent-product        = \ensuremath { \times } },
  expproduct /
    unknown      .meta:n    = { exponent-product        = \ensuremath {#1} },
  fixdp .choice:,
  fixdp /
    false        .meta:n    = { round-mode              = none        },
  fixdp /
    true         .meta:n    = { round-mode              = places      },
  fixdp          .default:n = { true                                  },
  fixsf          .choice: ,
  fixsf /
    false        .meta:n    = { round-mode              = none        },
  fixsf /
    true         .meta:n    = { round-mode              = figures     },
  fixsf          .default:n = { true                                  },
  fraction       .choice: ,
  fraction /
    frac         .meta:n    = { fraction-function       = \frac       },
  fraction /
    nice         .meta:n    = { fraction-function       = \frac       },
  fraction /
    sfrac        .meta:n    = { fraction-function       = \sfrac      },
  fraction /
    ugly         .meta:n    =
      {
        fraction-function       = \frac ,
        per-mode                = symbol-or-fraction
      },
  inlinebold     .meta:n    = { detect-inline-weight    = #1          },
  log            .code:n    = ,
  load           .code:n    = ,
  loctolang      .code:n    = ,
  mathOmega      .meta:n    = { math-ohm                = #1          },
  mathcelsius    .meta:n    = { math-celsius            = #1          },
  mathdegree     .meta:n    = { math-degree             = #1          },
  mathminute     .meta:n    = { math-arcminute          = #1          },
  mathmu         .meta:n    = { math-micro              = #1          },
  mathringA      .meta:n    = { math-angstrom           = #1          },
  mathrm         .code:n    =
    { \use:x { \keys_set:nn { siunitx } { math-rm = \exp_not:c {#1} } } },
  mathsOmega     .meta:n    = { math-ohm                = #1          },
  mathscelsius   .meta:n    = { math-celsius            = #1          },
  mathsdegree    .meta:n    = { math-degree             = #1          },
  mathsecond     .meta:n    = { math-arcsecond          = #1          },
  mathsf         .code:n    =
    { \use:x { \keys_set:nn { siunitx } { math-sf = \exp_not:c {#1} } } },
  mathsminute    .meta:n    = { math-arcminute          = #1          },
  mathsmu        .meta:n    = { math-micro              = #1          },
  mathsringA     .meta:n    = { math-angstrom           = #1          },
  mathsrm        .code:n    =
    { \use:x { \keys_set:nn { siunitx } { math-rm= \exp_not:c {#1} } } },
  mathssecond    .meta:n    = { math-arcsecond          = #1          },
  mathssf        .code:n    =
    { \use:x { \keys_set:nn { siunitx } { math-sf = \exp_not:c {#1} } } },
  mathstt        .code:n    =
    { \use:x { \keys_set:nn { siunitx } { math-tt = \exp_not:c {#1} } } },
  mathtt         .code:n   =
    { \use:x { \keys_set:nn { siunitx } { math-tt = \exp_not:c {#1} } } },
  negcolor       .meta:n    = { negative-color          = #1          },
  negcolour      .meta:n    = { negative-color          = #1          },
  noload         .code:n    = ,
  numaddn        .meta:n    = { input-symbols           = #1          },
  numcloseerr    .meta:n    = { input-close-uncertainty = #1          },
  numdecimal     .meta:n    = { input-decimal-markers   = #1          },
  numdigits      .meta:n    = { input-digits            = #1          },
  numdiv         .meta:n    = { input-quotient          = #1          },
  numexp         .meta:n    = { input-exponent-markers  = #1          },
  numgobble      .meta:n    = { input-ignore            = #1          },
  numopenerr     .meta:n    = { input-open-uncertainty  = #1          },
  numprod        .meta:n    = { input-product           = #1          },
  numsign        .meta:n    = { input-signs             = #1          },
  obeyall        .meta:n    = { detect-all              = #1          },
  obeyall        .default:n = { true                                  },
  obeybold       .meta:n    = { detect-weight           = #1          },
  obeybold       .default:n = { true                                  },
  obeyfamily     .meta:n    = { detect-family           = #1          },
  obeyfamily     .default:n = { true                                  },
  obeyitalic     .meta:n    = { detect-shape            = #1          },
  obeyitalic     .default:n = { true                                  },
  obeymode       .meta:n    = { detect-mode             = #1          },
  obeymode       .default:n = { true                                  },
  openerr        .meta:n    = { open-bracket            = \ensuremath {#1} },
  openfrac       .meta:n    = { open-bracket            = \ensuremath {#1} },
  openrange      .meta:n    = { open-bracket            = \ensuremath {#1} },
  padangle       .choice: ,
  padangle /
    all          .meta:n    =
      {
        add-arc-degree-zero = true,
        add-arc-minute-zero = true,
        add-arc-second-zero = true
      },
  padangle /
    both         .meta:n    =
      {
        add-arc-degree-zero = true,
        add-arc-minute-zero = true,
        add-arc-second-zero = true
      },
  padangle /
    false        .meta:n    =
      {
        add-arc-degree-zero = false,
        add-arc-minute-zero = false,
        add-arc-second-zero = false
      },
  padangle /
    large        .meta:n    =
      {
        add-arc-degree-zero = true,
        add-arc-minute-zero = true,
        add-arc-second-zero = false
      },
  padangle /
    none         .meta:n    =
      {
        add-arc-degree-zero = false,
        add-arc-minute-zero = false,
        add-arc-second-zero = false
      },
  padangle /
    small         .meta:n    =
      {
        add-arc-degree-zero = false,
        add-arc-minute-zero = true,
        add-arc-second-zero = true
      },
    true         .meta:n    =
      {
        add-arc-degree-zero = true,
        add-arc-minute-zero = true,
        add-arc-second-zero = true
      },
  padnumber      .choice: ,
  padnumber /
    all          .meta:n    =
      {
        add-decimal-zero = true,
        add-integer-zero = true
      },
  padnumber /
    both          .meta:n    =
      {
        add-decimal-zero = true,
        add-integer-zero = true
      },
  padnumber /
    false         .meta:n    =
      {
        add-decimal-zero = false,
        add-integer-zero = false
      },
  padnumber /
    leading        .meta:n    =
      {
        add-decimal-zero = true,
        add-integer-zero = false
      },
  padnumber /
    none         .meta:n    =
      {
        add-decimal-zero = false,
        add-integer-zero = false
      },
  padnumber /
    trailing         .meta:n    =
      {
        add-decimal-zero = false,
        add-integer-zero = true
      },
  padnumber /
    true          .meta:n    =
      {
        add-decimal-zero = true,
        add-integer-zero = true
      },
  per            .choice: ,
  per /
    frac         .meta:n    = { per-mode                = fraction    },
  per /
    fraction     .meta:n    = { per-mode                = fraction    },
  per /
    reciprocal   .meta:n    = { per-mode                = reciprocal  },
  per /
    slash        .meta:n    = { per-mode                = symbol      },
  prefixbase     .code:n    = ,
  prefixproduct  .code:n    = ,
  prefixsymbolic .meta:n    = { prefixes-as-symbols     = #1          },
  prefixsymbolic .default:n = { true                                  },
  prespace       .meta:n    = { space-before-unit       = #1          },
  prespace       .default:n = { true                                  },
  redefsymbols   .meta:n    = { redefine-symbols        = #1          },
  redefsymbols   .default:n = { true                                  },
  repeatunits    .choice: ,
  repeatunits /
    false        .meta:n    =
      {
        multi-part-units      = single,
        product-units         = single,
        range-units           = single
      },
  repeatunits /
    power        .meta:n    =
      {
        multi-part-units      = repeat,
        product-units         = power,
        range-units           = repeat
      },
  repeatunits /
    true        .meta:n       =
      {
        multi-part-units      = repeat,
        product-units         = repeat,
        range-units           = repeat
      },
  repeatunits    .default:n = { true                                  },
  retainplus     .meta:n    = { retain-explicit-plus    = #1          },
  retainplus     .default:n = { true                                  },
  seperr         .meta:n    = { separate-uncertainty    = #1          },
  seperr         .default:n = { true                                  },
  sepfour        .meta:n    = { group-four-digits       = true        },
  sepfour        .default:n = { true                                  },
  sf             .meta:n    =
    {
      round-mode      = figures,
      round-precision = #1,
    },
  sign           .meta:n    = { explicit-sign           = #1          },
  slash          .choice: ,
  slash /
    slash        .meta:n    = { per-symbol              = \ensuremath { / }  },
  slash /
    unknown      .meta:n    = { per-symbol              = \ensuremath {#1} },
  stickyper      .meta:n    = { sticky-per              = #1          },
  stickyper      .default:n = { true                                  },
  strictarc      .code:n    = ,
  tabalign       .code:n    =
    {
      \str_if_eq:nnTF {#1} { centre }
        { \keys_set:nn { siunitx } { table-alignment = center } }
        { \keys_set:nn { siunitx } { table-alignment = #1 } }
    },
  tabalignexp    .code:n    = { table-align-exponent    = #1          },
  tabautofit     .meta:n    = { table-auto-round        = #1          },
  tabautofit     .default:n = { true                                  },
  tabexpalign    .code:n    = { table-align-exponent    = #1          },
  tabformat      .meta:n    = { table-format            = #1          },
  tabnumalign    .code:n    =
    {
      \str_if_eq:nnTF {#1} { centre }
        { \keys_set:nn { siunitx } { table-number-alignment = center } }
        {
          \str_if_eq:nnTF {#1} { centredecimal }
            {
              \keys_set:nn { siunitx }
                { table-number-alignment = center-decimal-marker }
            }
            {
              \str_if_eq:nnTF {#1} { centerdecimal }
                {
                  \keys_set:nn { siunitx }
                    { table-number-alignment = center-decimal-marker }
                }
                {
                  \keys_set:nn { siunitx }
                    { table-number-alignment = #1 }
                }
            }
        }
    },
  tabparseonly   .meta:n    = { table-parse-only        = #1          },
  tabparseonly   .default:n = { true                                  },
  tabtextalign   .code:n    =
    {
      \str_if_eq:nnTF {#1} { centre }
        { \keys_set:nn { siunitx } { table-text-alignment = center } }
        { \keys_set:nn { siunitx } { table-text-alignment = #1 } }
    },
  tabunitalign   .code:n    =
    {
      \str_if_eq:nnTF {#1} { centre }
        { \keys_set:nn { siunitx } { table-unit-alignment = center } }
        { \keys_set:nn { siunitx } { table-unit-alignment = #1 } }
    },
  textOmega      .meta:n    = { text-ohm                = #1          },
  textcelsius    .meta:n    = { text-celsius            = #1          },
  textdegree     .meta:n    = { text-degree             = #1          },
  textminute     .meta:n    = { text-arcminute          = #1          },
  textmode       .choice: ,
  textmode /
    true         .meta:n    = { mode                    = text        },
  textmode /
    false        .meta:n    = { mode                    = math        },
  textmode       .default:n = { true                                  },
  textmu         .meta:n    = { text-micro              = #1          },
  textringA      .meta:n    = { text-angstrom           = #1          },
  textrm         .code:n    =
    { \use:x { \keys_set:nn { siunitx } { text-rm = \exp_not:c {#1} } } },
  textsecond     .meta:n    = { text-arcsecond          = #1          },
  textsf         .code:n    =
    { \use:x { \keys_set:nn { siunitx } { text-sf = \exp_not:c {#1} } } },
  texttt         .code:n    =
    { \use:x { \keys_set:nn { siunitx } { text-tt = \exp_not:c {#1} } } },
  tightpm        .meta:n    = { tight-spacing           = #1          },
  tightpm        .default:n = { true                                  },
  tophrase       .meta:n    = { range-phrase            = #1          },
  trapambigerr   .choice: ,
  trapambigerr
    / false      .meta:n    = { multi-part-units        = single      },
  trapambigerr
    / true       .meta:n    = { multi-part-units        = brackets    },
  trapambigerr   .default:n = { true                                  },
  trapambigfrac  .meta:n    = { bracket-numbers         = #1          },
  trapambigfrac  .default:n = { true                                  },
  trapambigrange .choice: ,
  trapambigrange
    / false      .meta:n    = { range-units             = single      },
  trapambigrange
    / true       .meta:n    = { range-units             = brackets    },
  trapambigrange .default:n = { true                                  },
  unitcolor      .meta:n    = { unit-color              = #1          },
  unitcolour     .meta:n    = { unit-color              = #1          },
  unitmathrm     .code:n    =
    { \use:x { \keys_set:nn { siunitx } { unit-math-rm = \exp_not:c {#1} } } },
  unitmathsf     .code:n    =
    { \use:x { \keys_set:nn { siunitx } { unit-math-sf = \exp_not:c {#1} } } },
  unitmathsrm    .code:n    =
    { \use:x { \keys_set:nn { siunitx } { unit-math-rm = \exp_not:c {#1} } } },
  unitmathssf    .code:n    =
    { \use:x { \keys_set:nn { siunitx } { unit-math-sf = \exp_not:c {#1} } } },
  unitmathstt    .code:n    =
    { \use:x { \keys_set:nn { siunitx } { unit-math-tt = \exp_not:c {#1} } } },
  unitmathtt     .code:n   =
    { \use:x { \keys_set:nn { siunitx } { unit-math-tt = \exp_not:c {#1} } } },
  unitmode       .meta:n    = { unit-mode               = #1          },
  unitsep        .choice: ,
  unitsep /
    cdot         .meta:n    =
      { inter-unit-product      = \ensuremath { { } \cdot { } }        },
  unitsep /
    comma        .meta:n    = { inter-unit-product      = { {,} }     },
  unitsep /
    fullstop     .meta:n    = { inter-unit-product      = { { . } }   },
  unitsep /
    med          .meta:n    = { inter-unit-product      = \ensuremath { \: } },
  unitsep /
    medium       .meta:n    = { inter-unit-product      = \ensuremath { \: } },
  unitsep /
    none         .meta:n    = { inter-unit-product      =             },
  unitsep /
    period       .meta:n    = { inter-unit-product      = { { . } }   },
  unitsep /
    space        .meta:n    = { inter-unit-product      = \text { ~ } },
  unitsep /
    stop         .meta:n    = { inter-unit-product      = { { . } }   },
  unitsep /
    thick        .meta:n    = { inter-unit-product      = \ensuremath { \; } },
  unitsep /
    thin         .meta:n    = { inter-unit-product      = \,          },
  unitsep /
    tightcdot    .meta:n    =
      { inter-unit-product      = \ensuremath { \bgroup \cdot \egroup } },
  unitsep /
    tighttimes   .meta:n    =
      { inter-unit-product      = \ensuremath { \bgroup \times \egroup } },
  unitsep /
    times        .meta:n   = { inter-unit-product       = \ensuremath { \times } },
  unitsep /
    unknown      .meta:n   = { inter-unit-product       = \ensuremath {#1} },
  unitspace      .choice: ,
  unitspace /
    med          .meta:n   = { inter-unit-product       = \ensuremath { \: } },
  unitspace /
    medium       .meta:n   = { inter-unit-product       = \ensuremath { \: } },
  unitspace /
    none         .meta:n   = { inter-unit-product       =             },
  unitspace /
    space        .meta:n   = { inter-unit-product       = \text { ~ } },
  unitspace /
    thick        .meta:n   = { inter-unit-product       = \ensuremath { \; } },
  unitspace /
    thin         .meta:n   = { inter-unit-product       = \,          },
  unitspace /
    unknown      .meta:n   = { inter-unit-product       = \ensuremath {#1} },
  valuecolor     .meta:n   = { number-color             = #1          },
  valuecolour    .meta:n   = { number-color             = #1          },
  valuemathrm    .code:n   =
    { \use:x { \keys_set:nn { siunitx } { number-math-rm = \exp_not:c {#1} } } },
  valuemathsf    .code:n   =
    { \use:x { \keys_set:nn { siunitx } { number-math-sf = \exp_not:c {#1} } } },
  valuemathsrm   .code:n   =
    { \use:x { \keys_set:nn { siunitx } { number-math-rm = \exp_not:c {#1} } } },
  valuemathssf   .code:n   =
    { \use:x { \keys_set:nn { siunitx } { number-math-sf = \exp_not:c {#1} } } },
  valuemathstt   .code:n   =
    { \use:x { \keys_set:nn { siunitx } { number-math-tt = \exp_not:c {#1} } } },
  valuemathtt    .code:n   =
    { \use:x { \keys_set:nn { siunitx } { number-math-tt = \exp_not:c {#1} } } },
  valuemode      .meta:n   = { number-mode              = #1          },
  valuesep        .choice: ,
  valuesep /
    cdot         .meta:n    =
      { number-unit-product     = \ensuremath { { } \cdot { } }  },
  valuesep /
    comma        .meta:n    = { number-unit-product     = { {,} }     },
  valuesep /
    fullstop     .meta:n    = { number-unit-product     = { { . } }   },
  valuesep /
    med          .meta:n    = { number-unit-product     = \ensuremath { \: } },
  valuesep /
    medium       .meta:n    = { number-unit-product     = \ensuremath { \: } },
  valuesep /
    none         .meta:n    = { number-unit-product     =             },
  valuesep /
    period       .meta:n    = { number-unit-product     = { { . } }   },
  valuesep /
    space        .meta:n    = { number-unit-product     = \text { ~ } },
  valuesep /
    stop         .meta:n    = { number-unit-product     = { { . } }   },
  valuesep /
    thick        .meta:n    = { number-unit-product     = \ensuremath { \; } },
  valuesep /
    thin         .meta:n    = { number-unit-product     = \,          },
  valuesep /
    tightcdot    .meta:n    =
      { number-unit-product      = \ensuremath { \bgroup \cdot \egroup } },
  valuesep /
    tighttimes   .meta:n    =
      { number-unit-product      = \ensuremath { \bgroup \times \egroup } },
  valuesep /
    times        .meta:n    = { number-unit-product      = \ensuremath { \times } },
  valuesep /
    unknown      .meta:n    = { number-unit-product      = \ensuremath {#1} },
  xspace         .meta:n    = { use-xspace               = #1         },
  xspace         .default:n = { true                                  },
}
\keys_define:nn { siunitx } {
  unknown .code:n =
    {
      \msg_error:nnx { siunitx } { unknown-option }
        { \exp_not:V \l_keys_key_str }
    }
}
\keys_set:nn { siunitx } {free-standing-units = true}
\cs_new_eq:NN \newunit     \DeclareSIUnit
\cs_new_eq:NN \renewunit   \DeclareSIUnit
\cs_new_eq:NN \provideunit \DeclareSIUnit
\NewDocumentCommand \newpower     { o m m } {
  \IfNoValueTF {#1}
    { \DeclareSIPrePower  #2 {#3} }
    { \DeclareSIPostPower #2 {#3} }
}
\NewDocumentCommand \renewpower   { o m m } {
  \IfNoValueTF {#1}
    { \DeclareSIPrePower  #2 {#3} }
    { \DeclareSIPostPower #2 {#3} }
}
\NewDocumentCommand \providepower { o m m } {
  \IfNoValueTF {#1}
    { \DeclareSIPrePower  #2 {#3} }
    { \DeclareSIPostPower #2 {#3} }
}
\NewDocumentCommand \newprefix     { o m m m } {
  \IfNoValueTF {#1}
    { \DeclareSIPrefix     #2 {#3} {#4} }
    { \DeclareBinaryPrefix #2 {#3} {#4} }
}
\NewDocumentCommand \renewprefix   { o m m m } {
  \IfNoValueTF {#1}
    { \DeclareSIPrefix     #2 {#3} {#4} }
    { \DeclareBinaryPrefix #2 {#3} {#4} }
}
\NewDocumentCommand \provideprefix { o m m m } {
  \IfNoValueTF {#1}
    { \DeclareSIPrefix     #2 {#3} {#4} }
    { \DeclareBinaryPrefix #2 {#3} {#4} }
}
\NewDocumentCommand \newqualifier { m m } {
  \__siunitx_declare_qualifier:Nn #1 {#2}
}
\cs_new_eq:NN \renewqualifier   \newqualifier
\cs_new_eq:NN \providequalifier \newqualifier
\DeclareSIPrePower \Square  { 2 }
\DeclareSIPrePower \ssquare { 2 }
\DeclareSIUnit \BAR   { \bar }
\DeclareSIUnit \bbar  { \bar }
\DeclareSIUnit \Day   { \day }
\DeclareSIUnit \dday  { \day }
\DeclareSIUnit \Gray  { \gray }
\DeclareSIUnit \ggray { \gray }
\DeclareSIUnit \atomicmass { \atomicmassunit }
\DeclareSIUnit \arcmin     { \arcminute }
\DeclareSIUnit \arcsec     { \arcsecond }
\DeclareSIUnit \are      { a }
\DeclareSIUnit \curie    { Ci }
\DeclareSIUnit \gal      { Gal }
\DeclareSIUnit \millibar { \milli \bar }
\DeclareSIUnit \rad      { rad }
\DeclareSIUnit \rem      { rem }
\DeclareSIUnit \roentgen { R }
\DeclareSIUnit \micA   { \micro \ampere }
\DeclareSIUnit \micmol { \micro \mole   }
\DeclareSIUnit \micl   { \micro \litre  }
\DeclareSIUnit \micL   { \micro \liter  }
\DeclareSIUnit \nanog  { \nano  \gram   }
\DeclareSIUnit \micg   { \micro \gram   }
\DeclareSIUnit \picm   { \pico  \metre  }
\DeclareSIUnit \micm   { \micro \metre  }
\DeclareSIUnit \Sec    { \second }
\DeclareSIUnit \mics   { \micro \second }
\DeclareSIUnit \cmc    { \centi \metre \cubed }
\DeclareSIUnit \dmc    { \deci  \metre \cubed }
\DeclareSIUnit \cms    { \centi \metre \squared }
\DeclareSIUnit \centimetrecubed   { \centi \metre \cubed }
\DeclareSIUnit \centimetresquared { \centi \metre \squared }
\DeclareSIUnit \cubiccentimetre   { \centi \metre \cubed }
\DeclareSIUnit \cubicdecimetre    { \deci \metre \cubed }
\DeclareSIUnit \squarecentimetre  { \centi \metre \squared }
\DeclareSIUnit \squaremetre       { \metre \squared }
\DeclareSIUnit \squarekilometre   { \kilo \metre \squared }
\DeclareSIUnit \parsec    { pc }
\DeclareSIUnit \lightyear { ly }
\DeclareSIUnit \gmol  { g  \text { - } mol }
\DeclareSIUnit \kgmol { kg \text { - } mol }
\DeclareSIUnit \lbmol { lb \text { - } mol }
\DeclareSIUnit \molar { \mole \per \cubic \deci \metre }
\DeclareSIUnit \Molar { \textsc { m } }
\DeclareSIUnit \torr  { Torr }
\DeclareSIUnit \gon    { gon }
\DeclareSIUnit \clight { \text { \ensuremath { c } } }
\DeclareSIUnit \micron    { \micro \metre }
\DeclareSIUnit \mrad      { \milli \rad }
\DeclareSIUnit \gauss     { G }
\DeclareSIUnit \eVperc    { \eV \per \clight }
\DeclareSIUnit \nanobarn  { \nano \barn }
\DeclareSIUnit \picobarn  { \pico \barn }
\DeclareSIUnit \femtobarn { \femto \barn }
\DeclareSIUnit \attobarn  { \atto \barn }
\DeclareSIUnit \zeptobarn { \zepto \barn }
\DeclareSIUnit \yoctobarn { \yocto \barn }
\DeclareSIUnit \nb        { \nano \barn }
\DeclareSIUnit \pb        { \pico \barn }
\DeclareSIUnit \fb        { \femto \barn }
\DeclareSIUnit \ab        { \atto \barn }
\DeclareSIUnit \zb        { \zepto \barn }
\DeclareSIUnit \yb        { \yocto \barn }
\NewDocumentCommand \requiresiconfigs { m }
  { \keys_set:nn { siunitx } { version-1-compatibility } }
%% Copyright (C) 2008-2021 by
%%   Joseph Wright <joseph.wright@morningstar2.co.uk>
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%%    http://www.latex-project.org/lppl.txt
%% 
%% This work is "maintained" (as per LPPL maintenance status) by
%%   Joseph Wright.
%% 
%% This work consists of the file  siunitx.dtx
%%           and the derived files siunitx.pdf,
%%                                 siunitx.sty and
%%                                 siunitx.ins.
%%
%% End of file `siunitx-version-1.cfg'.
